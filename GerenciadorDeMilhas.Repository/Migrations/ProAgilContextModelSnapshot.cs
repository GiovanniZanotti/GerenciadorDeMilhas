// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using GerenciadorDeMilhas.Repository;

namespace GerenciadorDeMilhas.Repository.Migrations
{
    [DbContext(typeof(GerenciadorDeMilhasContext))]
    partial class GerenciadorDeMilhasContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.AcessoCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClienteId");

                    b.Property<int>("IdCliente");

                    b.Property<string>("Login");

                    b.Property<string>("Observacoes");

                    b.Property<string>("Senha");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("AcessoCliente");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro");

                    b.Property<string>("CPF");

                    b.Property<string>("Cidade");

                    b.Property<string>("Complemento");

                    b.Property<int?>("ContaCorrenteId");

                    b.Property<DateTime>("Data");

                    b.Property<string>("Endereco");

                    b.Property<string>("Nome");

                    b.Property<string>("Numero");

                    b.Property<string>("Pais");

                    b.Property<string>("RG");

                    b.Property<string>("Skype");

                    b.Property<bool>("Status");

                    b.Property<string>("UF");

                    b.HasKey("Id");

                    b.HasIndex("ContaCorrenteId");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.ContaCorrente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdCliente");

                    b.HasKey("Id");

                    b.ToTable("ContaCorrente");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Boleto");

                    b.Property<int?>("ClienteId");

                    b.Property<bool>("Comunicado");

                    b.Property<string>("Endereco");

                    b.Property<int>("IdCliente");

                    b.Property<bool>("Nota");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.Historico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Assunto");

                    b.Property<int?>("ClienteId");

                    b.Property<DateTime>("Data");

                    b.Property<string>("Descricao");

                    b.Property<int>("IdCliente");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Historico");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.Milha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContaCorrenteId");

                    b.Property<DateTime>("DataRegistro");

                    b.Property<int>("IdCliente");

                    b.Property<string>("Nome");

                    b.Property<int>("Quantidade");

                    b.Property<string>("Tipo");

                    b.Property<float>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("ContaCorrenteId");

                    b.ToTable("Milha");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.PontoCartao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClienteId");

                    b.Property<int?>("ContaCorrenteId");

                    b.Property<DateTime>("DataRegistro");

                    b.Property<int>("IdCliente");

                    b.Property<string>("Nome");

                    b.Property<int>("Quantidade");

                    b.Property<float>("Valor");

                    b.Property<string>("tipo");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ContaCorrenteId");

                    b.ToTable("PontoCartao");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.Telefone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClienteId");

                    b.Property<int>("DDD");

                    b.Property<int>("IdCliente");

                    b.Property<string>("Numero");

                    b.Property<string>("Operadora");

                    b.Property<int>("Ramal");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Telefone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("GerenciadorDeMilhas.Domain.Identity.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("GerenciadorDeMilhas.Domain.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("GerenciadorDeMilhas.Domain.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("GerenciadorDeMilhas.Domain.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.AcessoCliente", b =>
                {
                    b.HasOne("GerenciadorDeMilhas.Domain.Cliente")
                        .WithMany("AcessoClientes")
                        .HasForeignKey("ClienteId");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.Cliente", b =>
                {
                    b.HasOne("GerenciadorDeMilhas.Domain.ContaCorrente", "ContaCorrente")
                        .WithMany()
                        .HasForeignKey("ContaCorrenteId");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.Email", b =>
                {
                    b.HasOne("GerenciadorDeMilhas.Domain.Cliente")
                        .WithMany("Emails")
                        .HasForeignKey("ClienteId");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.Historico", b =>
                {
                    b.HasOne("GerenciadorDeMilhas.Domain.Cliente")
                        .WithMany("Historicos")
                        .HasForeignKey("ClienteId");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("GerenciadorDeMilhas.Domain.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GerenciadorDeMilhas.Domain.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.Milha", b =>
                {
                    b.HasOne("GerenciadorDeMilhas.Domain.ContaCorrente")
                        .WithMany("Milhas")
                        .HasForeignKey("ContaCorrenteId");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.PontoCartao", b =>
                {
                    b.HasOne("GerenciadorDeMilhas.Domain.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("GerenciadorDeMilhas.Domain.ContaCorrente")
                        .WithMany("PontosCartao")
                        .HasForeignKey("ContaCorrenteId");
                });

            modelBuilder.Entity("GerenciadorDeMilhas.Domain.Telefone", b =>
                {
                    b.HasOne("GerenciadorDeMilhas.Domain.Cliente")
                        .WithMany("Telefones")
                        .HasForeignKey("ClienteId");
                });
#pragma warning restore 612, 618
        }
    }
}
